1- Un archivo directo es un archivo en el cual cualquier registro puede ser accedido
directamente. El hashing es un mecanismo que trata de asegurar la rápida recuperación de
registros, en un solo acceso promedio. Justamente los archivos lo relaciono con hashing
por esta razon, mediante el hashing se puede acceder a un archivo a traves de 1 solo acceso.

2- Función de dispersion(hash): 
recibe como entrada una clave, y produce una 
dirección de memoria secundaria donde almacenar el registro asociado a la clave en el archivo de datos.
El conjunto de direcciones físicas sobre el disco rígido es fijo y finito.
Si la función de hash es muy sencilla, tiende a generar colisiones (almacenar un registro en
una dirección de memoria ocupada).
Funciones de dispersión:
-Centros cuadrados: Se toma una clave de 6 dígitios, se eleva al cuadrado, se toman los dígitos centrales 
y se multiplican para mapear la cantidad de direcciones de memoria.
-Division Hash: Se realiza k mod m, donde k es la llave y m es el tamaño de la tabla hash. El resultado será 
la dirección de memoria donde se almacenará el registro.
-Variante Knuth Division Hash: Es igual a la Division Hash, solo que al valor de k inicial se le suma 3 y luego se le aplica mod m.

3- Sinonimo: 
Dos claves distintas que, al ser procesadas por la función de dispersión (función hash),
producen la misma dirección en la tabla hash. 
Colision: 
Situación en la que un registro es asignado, por función de dispersión, a una dirección que ya
posee uno o más registros. Una colision ocurre cuando la funcion de hash le asigna la misma direccion de memoria
a 2 registros, entonces colisionan, a diferencia del overflow, esto ocurre cuando en el nodo de la direccion
de memoria asignada por la funcion de hash no hay mas espacio.
Desborde(Overflow): 
Situación en la cual una clave carece de lugar en la dirección asignada por la función de dispersión.

4- Solución para que no haya colisiones:
- Elegir función de hash perfecta, que no genere colisiones. Muy difícil, opción inválida
- Minimizar el número de colisiones y tratar estas como una condición excepcional.
Existen varios modos de tratar colisiones:
- Distribuir los registros de la forma más aleatoria.
- Utilizar más espacio en disco. Ej: 100 direcciones disponibles para 10
registros. Poco eficiente en cuanto a espacio.
- Almacenar más de un registro por cada dirección física, así, 2 claves en
situación de colisión podrían almacenarse en la misma dirección física
asignada por la función de hash.
Si a pesar de la mayor capacidad del nodo, un registro no cabe, se dice que
ese nodo está saturado o en overflow. Esta situación debe tratarse.

5- Densidad de empaquetamiento (DE):
Es la relación entre el espacio disponible para el archivo (n) y la cantidad de registros que
componen dicho archivo (r).
El espacio disponible se define como la cantidad de nodos direccionables (n) por la función
de hash, y la cantidad de registros que cada nodo puede almacenar, Registros por Nodo
(RPN).
n = nodos direccionables
r = cantidad de registros del archivo
RPN = cantidad de registros por nodo
Si se debieran esparcir 30 registros entre 10 direcciones con capacidad de cinco registros
por cada dirección, la DE sería de 0.6 o 60% (30 / 5 * 10).
Cuanto mayor sea la DE, mayor será la probabilidad de colisiones.
Cuando la DE se mantiene baja, hay menos colisiones, pero se desperdicia espacio en
disco (fragmentación). La DE sube a medida que se agregan registros.
Si se quiere aumentar el espacio de direcciones disponibles se deben reubicar todos los
registros ya almacenados (con la función de hash ya aplicada) utilizando una nueva función
de hash apropiada para la nueva cantidad de direcciones disponibles.

6- -Saturación progresiva:
Consiste en almacenar el registro en la dirección siguiente más próxima (que haya espacio
en el nodo) desde donde se produce el overflow.
-Doble dispersión:
El método consiste en disponer de 2 funciones de hash, la primera obtiene la dirección de	
memoria a partir de la clave, en el cual el registro es ubicado. De producirse overflow, se
utilizará una segunda función de hash, esta segunda función no retorna una dirección, sino
que retorna un desplazamiento. Este desplazamiento se suma a la dirección base obtenida
con la primera función, generando así la nueva dirección donde se intentará ubicar al
registro. En caso de generarse nuevamente overflow, se deberá sumar de manera
reiterada el desplazamiento obtenido, y así sucesivamente hasta encontrar una dirección
con espacio suficiente para albergar al registro.
-Saturación progresiva encadenada
Igual que en la saturación progresiva, pero luego de localizar la nueva dirección disponible,
esta se enlaza con la dirección base inicial, generando una cadena de búsqueda de
elementos.
-Saturación progresiva encadenada con área de desborde separada:
Se distinguen dos tipos de nodos, los direccionables por la función de hash y los de reserva
que serán alcanzados en caso de saturación (no son alcanzados por la función de hash).
Al producirse saturación, el registro es reubicado en la primera dirección disponible del área
de desbordes, y la dirección base original se enlaza con la dirección del área de reserva
utilizada.
Si no hay lugar disponible en el nodo del área de desbordes, se redirecciona el elemento
a un nuevo nodo (dentro del área de desbordes), y se enlaza con el primero.





